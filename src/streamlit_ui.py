from langchain_core.messages import HumanMessage
from pydantic import InstanceOf
import streamlit as st
from agents.chat import graph

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
if prompt := st.chat_input("Message Molinetto"):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        response = None

        with st.status("Molinetto working...", expanded=True) as status:
            for response in graph.stream(
                {"messages": st.session_state.messages}, stream_mode="values"
            ):
                last_message = response["messages"][-1]

                if not isinstance(last_message, HumanMessage):
                    if getattr(last_message, "tool_calls", None):
                        response_text = last_message.tool_calls
                    else:
                        response_text = last_message.content

                    st.divider()
                    st.write(response_text)

            status.update(
                label="Molinetto finished processing your request.",
                state="complete",
                expanded=False,
            )

        if response:
            last_message = response["messages"][-1]

            response_text = last_message.content
            usage_metadata = last_message.usage_metadata
            response_metadata = last_message.response_metadata

            st.write(response_text)
            st.caption(usage_metadata)
            st.caption(response_metadata)

            st.session_state.messages.append(
                {"role": "assistant", "content": response_text}
            )
        else:
            st.error("No resonpse generated by Molinetto.", icon="⚠️")
